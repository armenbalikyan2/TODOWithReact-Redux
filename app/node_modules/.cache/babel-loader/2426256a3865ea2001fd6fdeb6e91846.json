{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { SET_DATA_LOADING, setDataSuccess, setDataFailure } from '../actions';\nimport { getData } from '../functions/GetData';\n\nfunction* SetDataSaga(values) {\n  try {\n    if (values) {\n      let response = yield call(getData);\n      var data = response.data;\n      data.push({\n        key: data.length.toString(),\n        name: values.names.toString()\n      });\n    }\n  } catch (error) {\n    yield take(setDataFailure);\n  }\n\n  yield put(setDataSuccess(data));\n}\n\nexport function* watchSetDataSaga() {\n  yield takeLatest(SET_DATA_LOADING, SetDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/SetDataSaga.js"],"names":["take","put","call","takeLatest","SET_DATA_LOADING","setDataSuccess","setDataFailure","getData","SetDataSaga","values","response","data","push","key","length","toString","name","names","error","watchSetDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,YAAjE;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,UAAUC,WAAV,CAAsBC,MAAtB,EAA8B;AAC5B,MAAI;AACF,QAAIA,MAAJ,EAAY;AACV,UAAIC,QAAQ,GAAG,MAAMR,IAAI,CAACK,OAAD,CAAzB;AACA,UAAII,IAAI,GAAGD,QAAQ,CAACC,IAApB;AACAA,MAAAA,IAAI,CAACC,IAAL,CAAU;AACRC,QAAAA,GAAG,EAAEF,IAAI,CAACG,MAAL,CAAYC,QAAZ,EADG;AAERC,QAAAA,IAAI,EAAEP,MAAM,CAACQ,KAAP,CAAaF,QAAb;AAFE,OAAV;AAID;AACF,GATD,CASE,OAAOG,KAAP,EAAc;AACd,UAAMlB,IAAI,CAACM,cAAD,CAAV;AACD;;AACD,QAAML,GAAG,CAACI,cAAc,CAACM,IAAD,CAAf,CAAT;AACD;;AAED,OAAO,UAAUQ,gBAAV,GAA6B;AAClC,QAAMhB,UAAU,CAACC,gBAAD,EAAmBI,WAAnB,CAAhB;AACD","sourcesContent":["import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { SET_DATA_LOADING, setDataSuccess, setDataFailure } from '../actions';\r\nimport { getData } from '../functions/GetData';\r\n\r\nfunction* SetDataSaga(values) {\r\n  try {\r\n    if (values) {\r\n      let response = yield call(getData);\r\n      var data = response.data\r\n      data.push({\r\n        key: data.length.toString(),\r\n        name: values.names.toString(),\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield take(setDataFailure);\r\n  }\r\n  yield put(setDataSuccess(data));\r\n}\r\n\r\nexport function* watchSetDataSaga() {\r\n  yield takeLatest(SET_DATA_LOADING, SetDataSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}