{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { deleteTask, getTasks } from '../api/TaskApi';\nimport { REMOVE_DATA_LOADING, removeDataSuccess, removeDataFailure } from '../actions';\nimport { taskId } from '../components/taskList/TaskListPage';\n\nfunction* RemoveDataSaga() {\n  const response = yield deleteTask(); //   console.log('removed');\n  //   let data = response.data;\n  //   // data = data.filter((value, index) => value != data[taskId - 1]);\n  //   if (response.status !== 200) {\n  //     yield take(removeDataFailure);\n  //   }\n  //   console.log(data);\n  //   yield put(removeDataSuccess(data));\n\n  console.log('removed', taskId);\n}\n\nexport function* watchRemoveDataSaga() {\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/RemoveDataSaga.js"],"names":["take","put","call","takeLatest","deleteTask","getTasks","REMOVE_DATA_LOADING","removeDataSuccess","removeDataFailure","taskId","RemoveDataSaga","response","console","log","watchRemoveDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,gBAArC;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,YAJP;AAKA,SAASC,MAAT,QAAuB,qCAAvB;;AAEA,UAAUC,cAAV,GAA2B;AACzB,QAAMC,QAAQ,GAAG,MAAMP,UAAU,EAAjC,CADyB,CAE3B;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEEQ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,MAAvB;AACD;;AAED,OAAO,UAAUK,mBAAV,GAAgC;AACrC,QAAMX,UAAU,CAACG,mBAAD,EAAsBI,cAAtB,CAAhB;AACD","sourcesContent":["import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { deleteTask, getTasks } from '../api/TaskApi';\r\nimport {\r\n  REMOVE_DATA_LOADING,\r\n  removeDataSuccess,\r\n  removeDataFailure,\r\n} from '../actions';\r\nimport { taskId } from '../components/taskList/TaskListPage';\r\n\r\nfunction* RemoveDataSaga() {\r\n  const response = yield deleteTask();\r\n//   console.log('removed');\r\n//   let data = response.data;\r\n//   // data = data.filter((value, index) => value != data[taskId - 1]);\r\n\r\n//   if (response.status !== 200) {\r\n//     yield take(removeDataFailure);\r\n//   }\r\n//   console.log(data);\r\n\r\n//   yield put(removeDataSuccess(data));\r\n\r\n  console.log('removed', taskId);\r\n}\r\n\r\nexport function* watchRemoveDataSaga() {\r\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}