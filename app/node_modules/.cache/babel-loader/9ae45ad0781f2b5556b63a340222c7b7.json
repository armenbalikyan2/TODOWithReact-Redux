{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { GET_DATA_LOADING, getDataFailure, getDataSuccess } from '../actions/GetDataActions';\n\nfunction* GetDataSaga() {\n  const response = yield call(getUsers); // function getFields(input, field1) {\n  //     let output = [];\n  //     for (let i=0; i < input.length ; ++i)\n  //         output.push(input[i][field1]);\n  //     return output;\n  // }\n  // console.log(response.data);\n\n  const data = response.data;\n\n  if (response.status !== 200) {\n    yield take(getDataFailure);\n  }\n\n  yield put(getDataSuccess(data));\n}\n\nexport function* watchGetDataSaga() {\n  yield takeLatest(GET_DATA_LOADING, GetDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/GetDataSaga.js"],"names":["take","put","call","takeLatest","GET_DATA_LOADING","getDataFailure","getDataSuccess","GetDataSaga","response","getUsers","data","status","watchGetDataSaga"],"mappings":"AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,2BAAjE;;AAGA,UAAUC,WAAV,GAAwB;AACpB,QAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACO,QAAD,CAA3B,CADoB,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAtB;;AACA,MAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AACzB,UAAMX,IAAI,CAACK,cAAD,CAAV;AACH;;AACD,QAAMJ,GAAG,CAACK,cAAc,CAACI,IAAD,CAAf,CAAT;AACH;;AAED,OAAO,UAAUE,gBAAV,GAA6B;AAChC,QAAMT,UAAU,CAACC,gBAAD,EAAmBG,WAAnB,CAAhB;AACH","sourcesContent":["\r\nimport { take, put, call, takeLatest } from 'redux-saga/effects'\r\nimport { GET_DATA_LOADING, getDataFailure, getDataSuccess } from '../actions/GetDataActions';\r\n\r\n\r\nfunction* GetDataSaga() {\r\n    const response = yield call(getUsers);\r\n    // function getFields(input, field1) {\r\n    //     let output = [];\r\n    //     for (let i=0; i < input.length ; ++i)\r\n    //         output.push(input[i][field1]);\r\n    //     return output;\r\n    // }\r\n    // console.log(response.data);\r\n    \r\n    const data = response.data;\r\n    if (response.status !== 200) {\r\n        yield take(getDataFailure)\r\n    }\r\n    yield put(getDataSuccess(data));\r\n}\r\n\r\nexport function* watchGetDataSaga() {\r\n    yield takeLatest(GET_DATA_LOADING, GetDataSaga)\r\n}"]},"metadata":{},"sourceType":"module"}