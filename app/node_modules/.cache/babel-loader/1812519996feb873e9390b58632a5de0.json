{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { deleteTask, getTasks } from '../api/TaskApi';\nimport { REMOVE_DATA_LOADING, removeDataSuccess, removeDataFailure } from '../actions';\nimport { taskId } from '../components/taskList/TaskListPage';\n\nfunction* RemoveDataSaga() {\n  console.log(taskId);\n\n  if (taskId !== undefined && taskId !== null) {\n    console.log(taskId);\n    const response = yield deleteTask(taskId);\n    const data = response.data;\n    yield put(removeDataSuccess(data));\n  }\n}\n\nexport function* watchRemoveDataSaga() {\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/RemoveDataSaga.js"],"names":["take","put","call","takeLatest","deleteTask","getTasks","REMOVE_DATA_LOADING","removeDataSuccess","removeDataFailure","taskId","RemoveDataSaga","console","log","undefined","response","data","watchRemoveDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,gBAArC;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,YAJP;AAKA,SAASC,MAAT,QAAuB,qCAAvB;;AAEA,UAAUC,cAAV,GAA2B;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;;AACA,MAAIA,MAAM,KAAKI,SAAX,IAAwBJ,MAAM,KAAK,IAAvC,EAA6C;AAC3CE,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AAEA,UAAMK,QAAQ,GAAG,MAAMV,UAAU,CAACK,MAAD,CAAjC;AACA,UAAMM,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,UAAMd,GAAG,CAACM,iBAAiB,CAACQ,IAAD,CAAlB,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMb,UAAU,CAACG,mBAAD,EAAsBI,cAAtB,CAAhB;AACD","sourcesContent":["import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { deleteTask, getTasks } from '../api/TaskApi';\r\nimport {\r\n  REMOVE_DATA_LOADING,\r\n  removeDataSuccess,\r\n  removeDataFailure,\r\n} from '../actions';\r\nimport { taskId } from '../components/taskList/TaskListPage';\r\n\r\nfunction* RemoveDataSaga() {\r\n  console.log(taskId);\r\n  if (taskId !== undefined && taskId !== null) {\r\n    console.log(taskId);\r\n\r\n    const response = yield deleteTask(taskId);\r\n    const data = response.data;\r\n    yield put(removeDataSuccess(data));\r\n  }\r\n}\r\n\r\nexport function* watchRemoveDataSaga() {\r\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}