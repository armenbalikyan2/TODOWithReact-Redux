{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\src\\\\components\\\\taskList\\\\TaskListPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { connect } from 'react-redux';\nimport { EditableCell } from '../common/EditableCell';\nimport axios from 'axios';\nimport { getDataLoading, setDataLoading, removeDataLoading } from '../../actions';\nimport { deleteTask } from '../../api/TaskApi';\nexport let taskId;\nexport let editingtask;\n\nconst TaskListPage = props => {\n  const [form] = Form.useForm();\n\n  if (props.tasks) {\n    var data = [];\n    props.tasks.map(item => data.push(item.task));\n  }\n\n  const [editingKey, setEditingKey] = useState('');\n  useEffect(() => {\n    props.getDataLoading();\n  }, []);\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      ...record\n    });\n    const row = form.validateFields();\n    console.log(row);\n    setEditingKey(record.key);\n    console.log(record);\n  };\n\n  const handleDelete = key => {\n    console.log(key);\n    taskId = key;\n    props.removeDataLoading();\n    window.location.reload(false);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      console.log(props.tasks);\n      console.log(key);\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        console.log(newData.splice(index, 1, { ...item,\n          ...row\n        }));\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        data = newData;\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        data = newData;\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"javascript:;\",\n        onClick: () => save(record.key),\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Popconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : /*#__PURE__*/React.createElement(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => {\n          let value = props.tasks.filter(value => value.task == record);\n          edit(value[0].id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, \"Edit\");\n    }\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (text, record) => props.tasks.length >= 1 ? /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Sure to delete?\",\n      onConfirm: () => {\n        let value = props.tasks.filter(value => value.task == record);\n        handleDelete(value[0].id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"Delete\")) : null\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks.userData\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getDataLoading: () => dispatch(getDataLoading),\n    removeDataLoading: () => dispatch(removeDataLoading)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/components/taskList/TaskListPage.js"],"names":["React","useState","useEffect","Table","Input","InputNumber","Popconfirm","Form","connect","EditableCell","axios","getDataLoading","setDataLoading","removeDataLoading","deleteTask","taskId","editingtask","TaskListPage","props","form","useForm","tasks","data","map","item","push","task","editingKey","setEditingKey","isEditing","record","key","edit","setFieldsValue","name","row","validateFields","console","log","handleDelete","window","location","reload","cancel","save","newData","index","findIndex","splice","errInfo","columns","title","dataIndex","width","editable","render","_","marginRight","value","filter","id","text","length","mergedColumns","col","onCell","inputType","editing","body","cell","onChange","mapStateToProps","state","userData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { EditableCell } from '../common/EditableCell';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  getDataLoading,\r\n  setDataLoading,\r\n  removeDataLoading,\r\n} from '../../actions';\r\nimport { deleteTask } from '../../api/TaskApi';\r\n\r\nexport let taskId;\r\nexport let editingtask;\r\nconst TaskListPage = (props) => {\r\n  const [form] = Form.useForm();\r\n  if (props.tasks) {\r\n    var data = [];\r\n    props.tasks.map((item) => data.push(item.task));\r\n  }\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n  useEffect(() => {\r\n    props.getDataLoading();\r\n  }, []);\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      name: '',\r\n      ...record,\r\n    });\r\n    const row = form.validateFields();\r\n    console.log(row);\r\n    setEditingKey(record.key);\r\n    console.log(record);\r\n  };\r\n\r\n  const handleDelete = (key) => {\r\n    console.log(key);\r\n    taskId = key;\r\n    props.removeDataLoading();\r\n    window.location.reload(false);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      console.log(props.tasks);\r\n      console.log(key);\r\n      const newData = [...data];\r\n      const index = newData.findIndex((item) => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        console.log(newData.splice(index, 1, { ...item, ...row }));\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        data = newData;\r\n        setEditingKey('');\r\n      } else {\r\n        newData.push(row);\r\n        data = newData;\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'name',\r\n      dataIndex: 'name',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span>\r\n            <a\r\n              href=\"javascript:;\"\r\n              onClick={() => save(record.key)}\r\n              style={{\r\n                marginRight: 8,\r\n              }}\r\n            >\r\n              Save\r\n            </a>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <a\r\n            disabled={editingKey !== ''}\r\n            onClick={() => {\r\n              let value = props.tasks.filter((value) => value.task == record);\r\n              edit(value[0].id);\r\n            }}\r\n          >\r\n            Edit\r\n          </a>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (text, record) =>\r\n        props.tasks.length >= 1 ? (\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => {\r\n              let value = props.tasks.filter((value) => value.task == record);\r\n              handleDelete(value[0].id);\r\n            }}\r\n          >\r\n            <a>Delete</a>\r\n          </Popconfirm>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel,\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    tasks: state.tasks.userData,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getDataLoading: () => dispatch(getDataLoading),\r\n    removeDataLoading: () => dispatch(removeDataLoading),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);\r\n"]},"metadata":{},"sourceType":"module"}