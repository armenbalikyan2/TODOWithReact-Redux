{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\src\\\\components\\\\taskList\\\\TaskListPage.js\";\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as taskActions from '../../actions/taskActions';\nimport { EditableCell } from '../common/EditableCell';\nimport { mergedColumns } from '../common/Columns';\n\nconst TaskListPage = props => {\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }));\n};\n\nTaskListPage.propTypes = {\n  tasks: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createTask: task => dispatch(taskActions.createTask(task))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/components/taskList/TaskListPage.js"],"names":["React","useState","Table","Input","InputNumber","Popconfirm","Form","connect","PropTypes","taskActions","EditableCell","mergedColumns","TaskListPage","props","form","body","cell","data","onChange","cancel","propTypes","tasks","array","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch","createTask","task"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,UAApC,EAAgDC,IAAhD,QAA4D,MAA5D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAE9B,sBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEC,IAAZ;AAAkB,IAAA,SAAS,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEN;AADF;AADI,KADd;AAME,IAAA,QAAQ,MANV;AAOE,IAAA,UAAU,EAAEO,IAPd;AAQE,IAAA,OAAO,EAAEN,aARX;AASE,IAAA,YAAY,EAAC,cATf;AAUE,IAAA,UAAU,EAAE;AACVO,MAAAA,QAAQ,EAAEC;AADA,KAVd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAkBD,CApBD;;AAqBAP,YAAY,CAACQ,SAAb,GAAyB;AACvBC,EAAAA,KAAK,EAAEb,SAAS,CAACc,KAAV,CAAgBC;AADA,CAAzB;;AAGA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLJ,IAAAA,KAAK,EAAEI,KAAK,CAACJ;AADR,GAAP;AAGD;;AAED,SAASK,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,UAAU,EAAGC,IAAD,IAAUF,QAAQ,CAAClB,WAAW,CAACmB,UAAZ,CAAuBC,IAAvB,CAAD;AADzB,GAAP;AAGD;;AACD,eAAetB,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cd,YAA7C,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as taskActions from '../../actions/taskActions';\r\nimport { EditableCell } from '../common/EditableCell';\r\nimport { mergedColumns } from '../common/Columns';\r\n\r\n\r\nconst TaskListPage = (props) => {\r\n\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel,\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\nTaskListPage.propTypes = {\r\n  tasks: PropTypes.array.isRequired,\r\n};\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    tasks: state.tasks,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    createTask: (task) => dispatch(taskActions.createTask(task)),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);\r\n"]},"metadata":{},"sourceType":"module"}