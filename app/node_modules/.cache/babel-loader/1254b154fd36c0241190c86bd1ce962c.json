{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { getTasks, addTask, deleteTask } from '../api/TaskApi';\nimport { SET_DATA_LOADING, setDataFailure, setDataSuccess, REMOVE_DATA_LOADING, removeDataSuccess } from '../actions';\nimport { task } from '../components/addTask/AddingTaskPage';\nimport { taskId } from '../components/taskList/TaskListPage';\n\nfunction* RemoveDataSaga() {\n  if (taskId !== undefined && taskId !== null) {\n    const response = yield deleteTask(taskId);\n    const data = response.data;\n    yield put(removeDataSuccess(data));\n  }\n}\n\nexport function* watchRemoveDataSaga() {\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/RemoveDataSaga.js"],"names":["take","put","call","takeLatest","getTasks","addTask","deleteTask","SET_DATA_LOADING","setDataFailure","setDataSuccess","REMOVE_DATA_LOADING","removeDataSuccess","task","taskId","RemoveDataSaga","undefined","response","data","watchRemoveDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,UAA5B,QAA8C,gBAA9C;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,EAA2DC,mBAA3D,EAAgFC,iBAAhF,QAAyG,YAAzG;AACA,SAASC,IAAT,QAAqB,sCAArB;AACA,SAASC,MAAT,QAAuB,qCAAvB;;AAEA,UAAUC,cAAV,GAA2B;AACzB,MAAID,MAAM,KAAKE,SAAX,IAAwBF,MAAM,KAAK,IAAvC,EAA6C;AAC3C,UAAMG,QAAQ,GAAG,MAAMV,UAAU,CAACO,MAAD,CAAjC;AACA,UAAMI,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,UAAMhB,GAAG,CAACU,iBAAiB,CAACM,IAAD,CAAlB,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMf,UAAU,CAACO,mBAAD,EAAsBI,cAAtB,CAAhB;AACD","sourcesContent":["import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { getTasks, addTask, deleteTask } from '../api/TaskApi';\r\nimport { SET_DATA_LOADING, setDataFailure, setDataSuccess, REMOVE_DATA_LOADING, removeDataSuccess } from '../actions';\r\nimport { task } from '../components/addTask/AddingTaskPage';\r\nimport { taskId } from '../components/taskList/TaskListPage';\r\n\r\nfunction* RemoveDataSaga() {\r\n  if (taskId !== undefined && taskId !== null) {\r\n    const response = yield deleteTask(taskId);\r\n    const data = response.data;\r\n    yield put(removeDataSuccess(data));\r\n  }\r\n}\r\n\r\nexport function* watchRemoveDataSaga() {\r\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}