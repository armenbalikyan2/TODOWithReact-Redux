{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { getTasks, addTask } from '../api/TaskApi';\nimport { SET_DATA_LOADING, setDataFailure, setDataSuccess } from '../actions';\nimport { task } from '../components/addTask/AddingTaskPage';\n\nfunction* SetDataSaga() {\n  if (task !== undefined && task !== null) {\n    const response = yield addTask(task);\n    const data = response.data;\n\n    if (response.status !== 200) {\n      yield take(getDataFailure);\n    }\n\n    yield put(setDataSuccess(task));\n  }\n\n  yield put(getDataSuccess(data));\n}\n\nexport function* watchSetDataSaga() {\n  yield takeLatest(SET_DATA_LOADING, SetDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/SetDataSaga.js"],"names":["take","put","call","takeLatest","getTasks","addTask","SET_DATA_LOADING","setDataFailure","setDataSuccess","task","SetDataSaga","undefined","response","data","status","getDataFailure","getDataSuccess","watchSetDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,gBAAlC;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,YAAjE;AACA,SAASC,IAAT,QAAqB,sCAArB;;AAEA,UAAUC,WAAV,GAAwB;AACtB,MAAID,IAAI,KAAKE,SAAT,IAAsBF,IAAI,KAAK,IAAnC,EAAyC;AACvC,UAAMG,QAAQ,GAAG,MAAMP,OAAO,CAACI,IAAD,CAA9B;AACA,UAAMI,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;AACA,QAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAMd,IAAI,CAACe,cAAD,CAAV;AACD;;AACH,UAAMd,GAAG,CAACO,cAAc,CAACC,IAAD,CAAf,CAAT;AACD;;AAED,QAAMR,GAAG,CAACe,cAAc,CAACH,IAAD,CAAf,CAAT;AACD;;AAED,OAAO,UAAUI,gBAAV,GAA6B;AAClC,QAAMd,UAAU,CAACG,gBAAD,EAAmBI,WAAnB,CAAhB;AACD","sourcesContent":["import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { getTasks, addTask } from '../api/TaskApi';\r\nimport { SET_DATA_LOADING, setDataFailure, setDataSuccess } from '../actions';\r\nimport { task } from '../components/addTask/AddingTaskPage';\r\n\r\nfunction* SetDataSaga() {\r\n  if (task !== undefined && task !== null) {\r\n    const response = yield addTask(task);\r\n    const data = response.data;\r\n    if (response.status !== 200) {\r\n        yield take(getDataFailure);\r\n      }\r\n    yield put(setDataSuccess(task));\r\n  }\r\n\r\n  yield put(getDataSuccess(data));\r\n}\r\n\r\nexport function* watchSetDataSaga() {\r\n  yield takeLatest(SET_DATA_LOADING, SetDataSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}