{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";export function handleResponse(_x){return _handleResponse.apply(this,arguments);}// In a real app, would likely call an error logging service.\nfunction _handleResponse(){_handleResponse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response){var error;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!response.ok){_context.next=2;break;}return _context.abrupt(\"return\",response.json());case 2:if(!(response.status===400)){_context.next=7;break;}_context.next=5;return response.text();case 5:error=_context.sent;throw new Error(error);case 7:throw new Error(\"Network response was not ok.\");case 8:case\"end\":return _context.stop();}}},_callee);}));return _handleResponse.apply(this,arguments);}export function handleError(error){// eslint-disable-next-line no-console\nconsole.error(\"API call failed. \"+error);throw error;}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/api/ApitUtils.js"],"names":["handleResponse","response","ok","json","status","text","error","Error","handleError","console"],"mappings":"yXAAA,eAAsBA,CAAAA,cAAtB,mDAWE;mGAXK,iBAA8BC,QAA9B,gIACCA,QAAQ,CAACC,EADV,yDACqBD,QAAQ,CAACE,IAAT,EADrB,cAECF,QAAQ,CAACG,MAAT,GAAoB,GAFrB,gDAKmBH,CAAAA,QAAQ,CAACI,IAAT,EALnB,QAKKC,KALL,oBAMK,IAAIC,CAAAA,KAAJ,CAAUD,KAAV,CANL,aAQG,IAAIC,CAAAA,KAAJ,CAAU,8BAAV,CARH,uD,iDAYL,MAAO,SAASC,CAAAA,WAAT,CAAqBF,KAArB,CAA4B,CACjC;AACAG,OAAO,CAACH,KAAR,CAAc,oBAAsBA,KAApC,EACA,KAAMA,CAAAA,KAAN,CACD","sourcesContent":["export async function handleResponse(response) {\r\n    if (response.ok) return response.json();\r\n    if (response.status === 400) {\r\n      // So, a server-side validation error occurred.\r\n      // Server side validation returns a string error message, so parse as text instead of json.\r\n      const error = await response.text();\r\n      throw new Error(error);\r\n    }\r\n    throw new Error(\"Network response was not ok.\");\r\n  }\r\n  \r\n  // In a real app, would likely call an error logging service.\r\n  export function handleError(error) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(\"API call failed. \" + error);\r\n    throw error;\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}