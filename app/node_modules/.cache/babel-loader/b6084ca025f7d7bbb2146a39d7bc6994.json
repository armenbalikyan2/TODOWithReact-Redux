{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\src\\\\components\\\\taskList\\\\TaskListPage.js\";\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as taskActions from '../../actions/taskActions';\nimport { EditableCell } from '../common/EditableCell';\nimport { mergedColumns } from '../common/Columns';\n\nconst TaskListPage = props => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(props.tasks);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const handleDelete = key => {\n    const dataSource = data;\n    setData(dataSource.filter(item => item.key !== key));\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n};\n\nTaskListPage.propTypes = {\n  tasks: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createTask: task => dispatch(taskActions.createTask(task))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/components/taskList/TaskListPage.js"],"names":["React","useState","Table","Input","InputNumber","Popconfirm","Form","connect","PropTypes","taskActions","EditableCell","mergedColumns","TaskListPage","props","form","useForm","data","setData","tasks","editingKey","setEditingKey","isEditing","record","key","edit","setFieldsValue","name","handleDelete","dataSource","filter","item","cancel","save","row","validateFields","newData","index","findIndex","splice","push","errInfo","console","log","body","cell","onChange","propTypes","array","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch","createTask","task"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as taskActions from '../../actions/taskActions';\r\nimport { EditableCell } from '../common/EditableCell';\r\nimport { mergedColumns } from '../common/Columns';\r\n\r\n\r\nconst TaskListPage = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [data, setData] = useState(props.tasks);\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      name: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n  const handleDelete = (key) => {\r\n    const dataSource = data;\r\n    setData(dataSource.filter((item) => item.key !== key));\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      const newData = [...data];\r\n      const index = newData.findIndex((item) => key === item.key);\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        setEditingKey('');\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel,\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\nTaskListPage.propTypes = {\r\n  tasks: PropTypes.array.isRequired,\r\n};\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    tasks: state.tasks,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    createTask: (task) => dispatch(taskActions.createTask(task)),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);\r\n"]},"metadata":{},"sourceType":"module"}