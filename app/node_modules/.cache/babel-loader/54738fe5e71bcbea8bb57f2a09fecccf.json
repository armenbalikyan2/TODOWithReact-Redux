{"ast":null,"code":"import { take, put, call, takeLatest } from 'redux-saga/effects';\nimport { GET_DATA_LOADING, getDataFailure, getDataSuccess } from '../actions/GetDataActions';\nimport * as taskApi from '../api/TaskApi';\n\nfunction* GetDataSaga() {\n  const response = yield call(taskApi.getTasks().then(tasks => {\n    console.log;\n  })); // function getFields(input, field1) {\n  //     let output = [];\n  //     for (let i=0; i < input.length ; ++i)\n  //         output.push(input[i][field1]);\n  //     return output;\n  // }\n  // console.log(response.data);\n\n  console.log(response);\n  const data = response.data;\n\n  if (response.status !== 200) {\n    yield take(getDataFailure);\n  }\n\n  yield put(getDataSuccess(data));\n}\n\nexport function* watchGetDataSaga() {\n  yield takeLatest(GET_DATA_LOADING, GetDataSaga);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/sagas/GetDataSaga.js"],"names":["take","put","call","takeLatest","GET_DATA_LOADING","getDataFailure","getDataSuccess","taskApi","GetDataSaga","response","getTasks","then","tasks","console","log","data","status","watchGetDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SACEC,gBADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,2BAJP;AAKA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;;AAEA,UAAUC,WAAV,GAAwB;AACtB,QAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACK,OAAO,CAACG,QAAR,GAAmBC,IAAnB,CAAwBC,KAAK,IAAG;AACxDC,IAAAA,OAAO,CAACC,GAAR;AACH,GAF2B,CAAD,CAA3B,CADsB,CAItB;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,QAAMM,IAAI,GAAGN,QAAQ,CAACM,IAAtB;;AACA,MAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMhB,IAAI,CAACK,cAAD,CAAV;AACD;;AACD,QAAMJ,GAAG,CAACK,cAAc,CAACS,IAAD,CAAf,CAAT;AACD;;AAED,OAAO,UAAUE,gBAAV,GAA6B;AAClC,QAAMd,UAAU,CAACC,gBAAD,EAAmBI,WAAnB,CAAhB;AACD","sourcesContent":["import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  GET_DATA_LOADING,\r\n  getDataFailure,\r\n  getDataSuccess,\r\n} from '../actions/GetDataActions';\r\nimport * as taskApi from '../api/TaskApi'\r\n\r\nfunction* GetDataSaga() {\r\n  const response = yield call(taskApi.getTasks().then(tasks =>{\r\n      console.log\r\n  }));\r\n  // function getFields(input, field1) {\r\n  //     let output = [];\r\n  //     for (let i=0; i < input.length ; ++i)\r\n  //         output.push(input[i][field1]);\r\n  //     return output;\r\n  // }\r\n  // console.log(response.data);\r\n  console.log(response);\r\n  const data = response.data;\r\n  if (response.status !== 200) {\r\n    yield take(getDataFailure);\r\n  }\r\n  yield put(getDataSuccess(data));\r\n}\r\n\r\nexport function* watchGetDataSaga() {\r\n  yield takeLatest(GET_DATA_LOADING, GetDataSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}