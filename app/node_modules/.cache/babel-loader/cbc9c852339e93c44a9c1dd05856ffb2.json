{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\src\\\\components\\\\taskList\\\\TaskListPage.js\";\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { connect } from 'react-redux';\nexport let originData = [];\n\nfor (let i = 0; i < 5; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Task ${i}`\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? /*#__PURE__*/React.createElement(InputNumber, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 46\n    }\n  }) : /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 64\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }), editing ? /*#__PURE__*/React.createElement(Form.Item, {\n    name: dataIndex,\n    style: {\n      margin: 0\n    },\n    rules: [{\n      required: true,\n      message: `Please Input ${title}!`\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, inputNode) : children);\n};\n\nconst TaskListPage = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const handleDelete = key => {\n    const dataSource = data;\n    setData(dataSource.filter(item => item.key !== key));\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"javascript:;\",\n        onClick: () => save(record.key),\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Popconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : /*#__PURE__*/React.createElement(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, \"Edit\");\n    }\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (text, record) => originData.length >= 1 ? /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Sure to delete?\",\n      onConfirm: () => handleDelete(record.key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, \"Delete\")) : null\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction mapStateToProps(state) {\n  return;\n}\n\nexport default TaskListPage;","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/components/taskList/TaskListPage.js"],"names":["React","useState","Table","Input","InputNumber","Popconfirm","Form","connect","originData","i","push","key","toString","name","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","TaskListPage","form","useForm","data","setData","editingKey","setEditingKey","isEditing","edit","setFieldsValue","handleDelete","dataSource","filter","item","cancel","save","row","validateFields","newData","findIndex","splice","errInfo","console","log","columns","width","editable","render","_","marginRight","text","length","mergedColumns","map","col","onCell","body","cell","onChange","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nexport let originData = [];\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n  originData.push({\r\n    key: i.toString(),\r\n    name: `Task ${i}`,\r\n  });\r\n}\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{\r\n            margin: 0,\r\n          }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          {inputNode}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nconst TaskListPage = () => {\r\n  const [form] = Form.useForm();\r\n  const [data, setData] = useState(originData);\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      name: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n  const handleDelete = (key) => {\r\n    const dataSource = data;\r\n    setData(dataSource.filter((item) => item.key !== key));\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      const newData = [...data];\r\n      const index = newData.findIndex((item) => key === item.key);\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        setEditingKey('');\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'name',\r\n      dataIndex: 'name',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span>\r\n            <a\r\n              href=\"javascript:;\"\r\n              onClick={() => save(record.key)}\r\n              style={{\r\n                marginRight: 8,\r\n              }}\r\n            >\r\n              Save\r\n            </a>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <a disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n            Edit\r\n          </a>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (text, record) =>\r\n        originData.length >= 1 ? (\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => handleDelete(record.key)}\r\n          >\r\n            <a>Delete</a>\r\n          </Popconfirm>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel,\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state){\r\n  return\r\n}\r\n\r\nexport default TaskListPage;\r\n"]},"metadata":{},"sourceType":"module"}