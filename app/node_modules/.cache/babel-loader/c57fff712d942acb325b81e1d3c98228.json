{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\todoWithReact-Redux\\\\todoWithReact-\\\\app\\\\src\\\\components\\\\taskList\\\\TaskListPage.js\";\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as taskActions from '../../actions/taskActions';\n\nconst TaskListPage = props => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(props.tasks);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const handleDelete = key => {\n    const dataSource = data;\n    setData(dataSource.filter(item => item.key !== key));\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"javascript:;\",\n        onClick: () => save(record.key),\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Popconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : /*#__PURE__*/React.createElement(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, \"Edit\");\n    }\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (text, record) => props.tasks.length >= 1 ? /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Sure to delete?\",\n      onConfirm: () => handleDelete(record.key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"Delete\")) : null\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: Ed\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }));\n};\n\nTaskListPage.propTypes = {\n  tasks: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createTask: task => dispatch(taskActions.createTask(task))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);","map":{"version":3,"sources":["C:/Users/User/Desktop/todoWithReact-Redux/todoWithReact-/app/src/components/taskList/TaskListPage.js"],"names":["React","useState","Table","Input","InputNumber","Popconfirm","Form","connect","PropTypes","taskActions","TaskListPage","props","form","useForm","data","setData","tasks","editingKey","setEditingKey","isEditing","record","key","edit","setFieldsValue","name","handleDelete","dataSource","filter","item","cancel","save","row","validateFields","newData","index","findIndex","splice","push","errInfo","console","log","columns","title","dataIndex","width","editable","render","_","marginRight","text","length","mergedColumns","map","col","onCell","inputType","editing","body","cell","Ed","onChange","propTypes","array","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch","createTask","task"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as taskActions from '../../actions/taskActions';\r\n\r\n\r\nconst TaskListPage = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [data, setData] = useState(props.tasks);\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      name: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n  const handleDelete = (key) => {\r\n    const dataSource = data;\r\n    setData(dataSource.filter((item) => item.key !== key));\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      const newData = [...data];\r\n      const index = newData.findIndex((item) => key === item.key);\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        setEditingKey('');\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'name',\r\n      dataIndex: 'name',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span>\r\n            <a\r\n              href=\"javascript:;\"\r\n              onClick={() => save(record.key)}\r\n              style={{\r\n                marginRight: 8,\r\n              }}\r\n            >\r\n              Save\r\n            </a>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <a disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n            Edit\r\n          </a>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (text, record) =>\r\n        props.tasks.length >= 1 ? (\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => handleDelete(record.key)}\r\n          >\r\n            <a>Delete</a>\r\n          </Popconfirm>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: Ed,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel,\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\nTaskListPage.propTypes = {\r\n  tasks: PropTypes.array.isRequired,\r\n};\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    tasks: state.tasks,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    createTask: (task) => dispatch(taskActions.createTask(task)),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);\r\n"]},"metadata":{},"sourceType":"module"}