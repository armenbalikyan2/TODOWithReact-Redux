{"version":3,"sources":["actions/GetDataActions.js","actions/SetDataActions.js","actions/RemoveDataActions.js","components/addTask/AddingTaskPage.js","components/taskList/TaskListPage.js","components/common/EditableCell.js","components/home/HomePage.js","components/about/AboutPage.js","components/common/Header.js","PageNotFound.js","App.js","serviceWorker.js","api/TaskApi.js","sagas/GetDataSaga.js","sagas/SetDataSaga.js","sagas/RemoveDataSaga.js","sagas/initSagas.js","reducers/RemoveDataReducer.js","reducers/GetDataReducer.js","reducers/SetDataReducer.js","reducers/index.js","store/configureStore.js","index.js"],"names":["getDataLoading","type","getDataSuccess","data","payload","getDataFailure","setDataLoading","setDataSuccess","removeDataLoading","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","task","connect","taskId","state","tasks","userData","dispatch","props","useEffect","className","name","onFinish","values","id","length","toString","names","history","push","window","location","reload","List","fields","add","remove","map","field","index","Item","label","required","key","validateTrigger","rules","whitespace","message","noStyle","placeholder","style","width","MinusCircleOutlined","margin","onClick","PlusOutlined","htmlType","EditableCell","editing","dataIndex","title","inputType","children","record","restProps","inputNode","Form","useForm","form","item","mergedColumns","editable","render","text","onConfirm","value","filter","col","onCell","component","components","body","cell","bordered","dataSource","columns","HomePage","to","AboutPage","Header","href","HomeFilled","UnorderedListOutlined","PageNotFound","App","exact","path","InputPage","ListScreen","Boolean","hostname","match","baseUrl","getTasks","axios","get","GetDataSaga","watchGetDataSaga","call","response","status","take","put","takeLatest","SetDataSaga","watchSetDataSaga","undefined","post","RemoveDataSaga","watchRemoveDataSaga","console","log","delete","initialState","removingData","gettingUser","settingData","sagaMiddleware","rootReducer","combineReducers","action","setTask","removeTask","createSagaMiddleware","middleWare","thunk","store","createStore","compose","applyMiddleware","Object","sagas","forEach","run","bind","info","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.341672f9.chunk.js","sourcesContent":["export const GET_DATA_LOADING = \"GET_DATA_LOADING\";\r\nexport const GET_DATA_SUCCESS = \"GET_DATA_SUCCESS\";\r\nexport const GET_DATA_FAILURE = \"GET_DATA_FAILURE\";\r\n\r\n\r\nexport const getDataLoading = {\r\n    type: GET_DATA_LOADING,\r\n};\r\n\r\nexport const getDataSuccess = (data) => ({\r\n    type: GET_DATA_SUCCESS,\r\n    payload: data,\r\n});\r\n\r\nexport const getDataFailure = {\r\n    type: GET_DATA_FAILURE,\r\n};","export const SET_DATA_LOADING = \"SET_DATA_LOADING\";\r\nexport const SET_DATA_SUCCESS = \"SET_DATA_SUCCESS\";\r\nexport const SET_DATA_FAILURE = \"SET_DATA_FAILURE\";\r\n\r\n\r\nexport const setDataLoading = {\r\n    type: SET_DATA_LOADING,\r\n};\r\n\r\nexport const setDataSuccess = (data) => ({\r\n    type: SET_DATA_SUCCESS,\r\n    payload: data,\r\n});\r\n\r\nexport const setDataFailure = {\r\n    type: SET_DATA_FAILURE,\r\n};","export const REMOVE_DATA_LOADING = \"REMOVE_DATA_LOADING\";\r\nexport const REMOVE_DATA_SUCCESS = \"REMOVE_DATA_SUCCESS\";\r\nexport const REMOVE_DATA_FAILURE = \"REMOVE_DATA_FAILURE\";\r\n\r\n\r\nexport const removeDataLoading = {\r\n    type: REMOVE_DATA_LOADING,\r\n};\r\n\r\nexport const removeDataSuccess = (id) => ({\r\n    type: REMOVE_DATA_SUCCESS,\r\n    payload: id,\r\n});\r\n\r\nexport const removeDataFailure = {\r\n    type: REMOVE_DATA_FAILURE,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport './inputScreen.css';\r\nimport { connect } from 'react-redux';\r\nimport { getDataLoading, setDataLoading } from '../../actions';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 20 },\r\n  },\r\n};\r\nconst formItemLayoutWithOutLabel = {\r\n  wrapperCol: {\r\n    xs: { span: 24, offset: 0 },\r\n    sm: { span: 20, offset: 4 },\r\n  },\r\n};\r\n\r\nexport let task = {};\r\nconst AddingTaskPage = (props) => {\r\n  useEffect(() => {\r\n    props.getDataLoading();\r\n  }, []);\r\n  const onFinish = (values) => {\r\n    task = {\r\n      id: props.tasks.length.toString(),\r\n      name: values.names.toString(),\r\n    };\r\n\r\n    props.setDataLoading();\r\n    props.history.push('/list');\r\n    window.location.reload(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addTask\">\r\n      <Form\r\n        name=\"dynamic_form_item\"\r\n        {...formItemLayoutWithOutLabel}\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.List name=\"names\">\r\n          {(fields, { add, remove }) => {\r\n            return (\r\n              <div>\r\n                {fields.map((field, index) => (\r\n                  <Form.Item\r\n                    {...(index === 0\r\n                      ? formItemLayout\r\n                      : formItemLayoutWithOutLabel)}\r\n                    label={index === 0 ? 'Task' : ''}\r\n                    required={false}\r\n                    key={field.key}\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      validateTrigger={['onChange', 'onBlur']}\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          whitespace: true,\r\n                          message:\r\n                            \"Please input task's name or delete this field.\",\r\n                        },\r\n                      ]}\r\n                      noStyle\r\n                    >\r\n                      <Input placeholder=\"Add Task\" style={{ width: '60%' }} />\r\n                    </Form.Item>\r\n                    {fields.length > 1 ? (\r\n                      <MinusCircleOutlined\r\n                        className=\"dynamic-delete-button\"\r\n                        style={{ margin: '0 8px' }}\r\n                        onClick={() => {\r\n                          remove(field.name);\r\n                        }}\r\n                      />\r\n                    ) : null}\r\n                  </Form.Item>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => {\r\n                      add();\r\n                    }}\r\n                    style={{ width: '60%' }}\r\n                  >\r\n                    <PlusOutlined /> Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </div>\r\n            );\r\n          }}\r\n        </Form.List>\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    tasks: state.tasks.userData,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getDataLoading: () => dispatch(getDataLoading),\r\n    setDataLoading: () => dispatch(setDataLoading),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddingTaskPage);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { EditableCell } from '../common/EditableCell';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  getDataLoading,\r\n  setDataLoading,\r\n  removeDataLoading,\r\n} from '../../actions';\r\n\r\nexport let taskId;\r\nexport let editingtask;\r\n\r\nconst TaskListPage = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  if (props.tasks) {\r\n    var data = [];\r\n    props.tasks.map((item) => data.push(item.task));\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.getDataLoading();\r\n  }, []);\r\n\r\n  const handleDelete = (key) => {\r\n    taskId = key;\r\n    props.removeDataLoading();\r\n    window.location.reload(false);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'name',\r\n      dataIndex: 'name',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (text, record) =>\r\n        props.tasks.length >= 1 ? (\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => {\r\n              let value = props.tasks.filter((value) => value.task == record);\r\n              handleDelete(value[0].id);\r\n            }}\r\n          >\r\n            <a>Delete</a>\r\n          </Popconfirm>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    tasks: state.tasks.userData,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getDataLoading: () => dispatch(getDataLoading),\r\n    removeDataLoading: () => dispatch(removeDataLoading),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListPage);\r\n","import React from 'react';\r\nimport { Input, InputNumber, Form } from 'antd';\r\n\r\nexport const EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{\r\n            margin: 0,\r\n          }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          {inputNode}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './homePage.css';\r\n\r\nconst HomePage = () => (\r\n  <div className=\"homePage\">\r\n    <h1>Todo App </h1>\r\n    <Link to=\"/about\"> Learn more </Link>\r\n  </div>\r\n);\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport './aboutPage.css';\r\n\r\nconst AboutPage = () => (\r\n  <div className=\"aboutPage\">\r\n    <h2>About</h2>\r\n    <p>\r\n      This TODO app uses Javascript, React, Redux, React Router and many other\r\n      helpful libraries.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\r\nimport { Breadcrumb } from 'antd';\r\nimport {\r\n  UnorderedListOutlined,\r\n  PlusOutlined,\r\n  HomeFilled,\r\n} from '@ant-design/icons';\r\nimport './headerStyle.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <header />\r\n      <nav>\r\n        <div>\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item href=\"/\">\r\n              <HomeFilled />\r\n              <span>Home</span>\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item href=\"/list\">\r\n              <UnorderedListOutlined />\r\n              <span>Task List</span>\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item href=\"/addTask\">\r\n              <PlusOutlined />\r\n              <span>Add Task</span>\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst PageNotFound = () => <h1>Oops!! Page Not Found.</h1>;\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport InputPage from './components/addTask/AddingTaskPage';\nimport ListScreen from './components/taskList/TaskListPage';\nimport HomePage from './components/home/HomePage';\nimport AboutPage from './components/about/AboutPage';\nimport Header from './components/common/Header';\nimport PageNotFound from './PageNotFound';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/about\" component={AboutPage} />\n        <Route path=\"/addTask\" component={InputPage} />\n        <Route path=\"/list\" component={ListScreen} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { handleResponse, handleError } from './ApitUtils';\r\nimport axios from 'axios';\r\n//main api\r\nconst baseUrl = 'http://localhost:3000/tasks/';\r\n\r\n//getting tasks\r\nexport function getTasks() {\r\n  return axios.get(baseUrl);\r\n}\r\n\r\n//setting tasks\r\nexport function addTask(task) {\r\n  return axios.post(baseUrl, { task });\r\n}\r\n\r\n//deleting tasks\r\nexport function deleteTask(taskId) {\r\n  return axios.delete(`http://localhost:3000/tasks/${taskId}`);\r\n}\r\n//editing tasks\r\nexport function editTask(taskId, task) {\r\n  return axios.put(`http://localhost:3000/tasks/${taskId}`, {\r\n    name: task,\r\n  });\r\n}\r\n","import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  GET_DATA_LOADING,\r\n  getDataFailure,\r\n  getDataSuccess,\r\n} from '../actions/GetDataActions';\r\nimport { getTasks } from '../api/TaskApi';\r\n\r\nfunction* GetDataSaga() {\r\n  const response = yield call(getTasks);\r\n  const data = response.data;\r\n  \r\n  if (response.status !== 200) {\r\n    yield take(getDataFailure);\r\n  }\r\n\r\n  yield put(getDataSuccess(data));\r\n}\r\n\r\nexport function* watchGetDataSaga() {\r\n  yield takeLatest(GET_DATA_LOADING, GetDataSaga);\r\n}\r\n","import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { getTasks, addTask } from '../api/TaskApi';\r\nimport { SET_DATA_LOADING, setDataFailure, setDataSuccess } from '../actions';\r\nimport { task } from '../components/addTask/AddingTaskPage';\r\n\r\nfunction* SetDataSaga() {\r\n  if (task !== undefined && task !== null) {\r\n    const response = yield addTask(task);\r\n    const data = response.data;\r\n    yield put(setDataSuccess(data));\r\n  }\r\n}\r\n\r\nexport function* watchSetDataSaga() {\r\n  yield takeLatest(SET_DATA_LOADING, SetDataSaga);\r\n}\r\n","import { take, put, call, takeLatest } from 'redux-saga/effects';\r\nimport { deleteTask, getTasks } from '../api/TaskApi';\r\nimport {\r\n  REMOVE_DATA_LOADING,\r\n  removeDataSuccess,\r\n  removeDataFailure,\r\n} from '../actions';\r\nimport { taskId } from '../components/taskList/TaskListPage';\r\n\r\nfunction* RemoveDataSaga() {\r\n  console.log(taskId);\r\n  if (taskId !== undefined && taskId !== null) {\r\n    const response = yield deleteTask(taskId);\r\n    console.log(taskId);\r\n    const data = response.data;\r\n    yield put(removeDataSuccess(data));\r\n  }\r\n}\r\n\r\nexport function* watchRemoveDataSaga() {\r\n  yield takeLatest(REMOVE_DATA_LOADING, RemoveDataSaga);\r\n}\r\n","import * as sagas from './index';\r\n\r\nexport const initSagas = (sagaMiddleware) => {\r\n  Object.values(sagas).forEach(sagaMiddleware.run.bind(sagaMiddleware));\r\n};\r\n","import {\r\n  REMOVE_DATA_SUCCESS,\r\n  REMOVE_DATA_FAILURE,\r\n  REMOVE_DATA_LOADING,\r\n} from '../actions';\r\n\r\nconst initialState = {\r\n  removingData: false,\r\n  id: [],\r\n};\r\n\r\nexport function RemoveDataReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case REMOVE_DATA_LOADING:\r\n      return {\r\n        ...state,\r\n        removingData: true,\r\n      };\r\n    case REMOVE_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        removingData: false,\r\n        id: action.payload,\r\n      };\r\n    case REMOVE_DATA_FAILURE:\r\n      return {\r\n        ...state,\r\n        removingData: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GET_DATA_LOADING,\r\n  GET_DATA_SUCCESS,\r\n  GET_DATA_FAILURE,\r\n} from '../actions';\r\n\r\nconst initialState = {\r\n  gettingUser: false,\r\n  userData: [],\r\n};\r\n\r\nexport  function GetDataReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_DATA_LOADING:\r\n      return {\r\n        ...state,\r\n        gettingUser: true,\r\n      };\r\n    case GET_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        gettingUser: false,\r\n        userData: action.payload,\r\n      };\r\n    case GET_DATA_FAILURE:\r\n      return {\r\n        ...state,\r\n        gettingUser: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SET_DATA_LOADING,\r\n  SET_DATA_SUCCESS,\r\n  SET_DATA_FAILURE,\r\n} from '../actions';\r\n\r\nconst initialState = {\r\n  settingData: false,\r\n  data: [],\r\n};\r\n\r\nexport function SetDataReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_DATA_LOADING:\r\n      return {\r\n        ...state,\r\n        settingData: true,\r\n      };\r\n    case SET_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        settingData: false,\r\n        data: action.payload,\r\n      };\r\n    case SET_DATA_FAILURE:\r\n      return {\r\n        ...state,\r\n        settingData: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { RemoveDataReducer } from './RemoveDataReducer';\r\nimport { GetDataReducer } from './GetDataReducer';\r\nimport { SetDataReducer } from './SetDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  tasks: GetDataReducer,\r\n  setTask: SetDataReducer,\r\n  removeTask: RemoveDataReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\nimport { initSagas } from '../sagas/initSagas';\r\nimport rootReducer from '../reducers';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleWare = [sagaMiddleware, thunk];\r\nconst store = createStore(rootReducer, compose(applyMiddleware(...middleWare)));\r\ninitSagas(sagaMiddleware);\r\nconsole.info('Saga middleware implemented');\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport configureStore from './store/configureStore';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport store from './store/configureStore';\n\n\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}